name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Configure Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}

      - name: Check formatting
        if: matrix.os == 'ubuntu-latest'
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

      - name: Run demo mode
        run: cargo run -- --demo
        timeout-minutes: 5

      - name: Test individual sample projects
        run: |
          cargo run -- --project sample_projects/simple.proj --target Build --verbose
          cargo run -- --project sample_projects/conditional.proj --target Test --verbose
          cargo run -- --project sample_projects/with_imports.proj --target Build --verbose

      - name: Security audit (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo install cargo-audit
          cargo audit

      - name: Generate documentation (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo doc --all-features --no-deps
          cargo doc --all-features --no-deps 2>&1 | grep -q "warning" && exit 1 || exit 0

      - name: Integration tests (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Test error handling
          ! cargo run -- --project non-existent.proj --target Build

          # Test verbose mode
          cargo run -- --demo --verbose

          # Test different targets
          cargo run -- --project sample_projects/conditional.proj --target Build --verbose

          # Verify sample project files exist
          test -f sample_projects/simple.proj
          test -f sample_projects/conditional.proj
          test -f sample_projects/with_imports.proj
          test -f sample_projects/common.props

          # Test project file parsing (if xmllint is available)
          if command -v xmllint >/dev/null 2>&1; then
            xmllint --noout sample_projects/*.proj
            xmllint --noout sample_projects/*.props
          fi

      - name: Upload documentation artifact (Ubuntu only)
        if: matrix.os == 'ubuntu-latest' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: target/doc/
