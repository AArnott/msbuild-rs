name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release"
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Get tag name
        id: tag_name
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TAG_NAME=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          if git tag --list | grep -q "${{ steps.tag_name.outputs.TAG_NAME }}"; then
            PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -A1 "${{ steps.tag_name.outputs.TAG_NAME }}" | tail -1)
            if [ -n "$PREVIOUS_TAG" ] && [ "$PREVIOUS_TAG" != "${{ steps.tag_name.outputs.TAG_NAME }}" ]; then
              echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
              git log --pretty=format:"- %s" ${PREVIOUS_TAG}..${{ steps.tag_name.outputs.TAG_NAME }} >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "CHANGELOG=Initial release" >> $GITHUB_OUTPUT
            fi
          else
            echo "CHANGELOG=Manual release" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e # v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
          release_name: MSBuild-RS ${{ steps.tag_name.outputs.TAG_NAME }}
          body: |
            # MSBuild-RS ${{ steps.tag_name.outputs.TAG_NAME }}

            ## Changes
            ${{ steps.changelog.outputs.CHANGELOG }}

            ## Installation

            Download the appropriate binary for your platform from the assets below.

            ### Linux (x86_64)
            ```bash
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.tag_name.outputs.TAG_NAME }}/msbuild-rs-linux-x64
            chmod +x msbuild-rs-linux-x64
            ./msbuild-rs-linux-x64 --demo
            ```

            ### Linux (x86_64, static)
            ```bash
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.tag_name.outputs.TAG_NAME }}/msbuild-rs-linux-x64-musl
            chmod +x msbuild-rs-linux-x64-musl
            ./msbuild-rs-linux-x64-musl --demo
            ```

            ### Windows (x86_64)
            Download `msbuild-rs-windows-x64.exe` and run:
            ```cmd
            msbuild-rs-windows-x64.exe --demo
            ```

            ### macOS (x86_64)
            ```bash
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.tag_name.outputs.TAG_NAME }}/msbuild-rs-macos-x64
            chmod +x msbuild-rs-macos-x64
            ./msbuild-rs-macos-x64 --demo
            ```

            ### macOS (ARM64)
            ```bash
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.tag_name.outputs.TAG_NAME }}/msbuild-rs-macos-arm64
            chmod +x msbuild-rs-macos-arm64
            ./msbuild-rs-macos-arm64 --demo
            ```

            ## Usage

            ```bash
            # Run demo mode
            msbuild-rs --demo

            # Build a specific project
            msbuild-rs --project MyApp.csproj --target Build

            # Verbose output
            msbuild-rs --project MyApp.csproj --target Build --verbose
            ```
          draft: false
          prerelease: ${{ contains(steps.tag_name.outputs.TAG_NAME, 'alpha') || contains(steps.tag_name.outputs.TAG_NAME, 'beta') || contains(steps.tag_name.outputs.TAG_NAME, 'rc') }}

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: msbuild-rs
            asset_name: msbuild-rs-linux-x64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: msbuild-rs
            asset_name: msbuild-rs-linux-x64-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: msbuild-rs.exe
            asset_name: msbuild-rs-windows-x64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: msbuild-rs
            asset_name: msbuild-rs-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: msbuild-rs
            asset_name: msbuild-rs-macos-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Configure Rust cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2
        with:
          key: release-${{ matrix.os }}-${{ matrix.target }}

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix only)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to crates.io
    needs: build-release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Configure Rust cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true # Allow failure if already published
